package main

var Orientation vec2
var Ticks float

func getYOffset() float {
	const (
		pi = 3.141592653589
		d = 10.
		shrink = 0.5
	)

	t := clamp(Ticks, 0., d)
	return sin(t*pi/d)*shrink
}

func body(p vec2) vec3 {
	x := abs(p.x*2.-1.)
	y := abs(p.y*2.-1.)
	c0 := mix(
		vec3(1., 1., 1.),
		vec3(0.3, 0.3, 1.),
		x,
	)
	c1 := mix(
		vec3(0.98, 0.40, 0.08),
		vec3(0.5, 0.19, 0.65),
		x,
	)

	return mix(c0, c1, y)
}

func shade(y float, clr vec3) vec3 {
	return normalize(clr-vec3(0.3, 0.2, 0.2)*sin(y*6.))
}

func eyes(p vec2) vec3 {
	p.y = 1.-p.y // Flip y
	p = p*2.-1.
	p.x -= Orientation.x
	p.y *= 2. // Restore 1/2 ratio with x
	p.y -= Orientation.y*1.25*2.
	d := min(
		length(p-vec2(-0.4, 1.25))-0.3,
		length(p-vec2(0.4, 1.25))-0.3,
	)
	if d < 0. {
		return vec3(0.3)
	}
	return vec3(1.)
}

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
	yoff := getYOffset()
	if texCoord.y < yoff {
		return vec4(0.)
	}

	tc := vec2(texCoord.x, texCoord.y-yoff)

	clr := body(tc)
	clr = shade(tc.y, clr)
	clr *= eyes(tc)

	return vec4(clr, 1.)
}