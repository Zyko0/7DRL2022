package main

var Levels [60]float
var MinLevel float
var MaxLevel float

func colorize(y float) vec4 {
	const opacity = 0.8

	clr := mix(
		vec4(1., 0.31, 0., 1.),
		vec4(1., 0.68, 0., 1.),
		smoothstep(0., 1., y),
	)
	clr = mix(
		clr,
		vec4(1., 0.31, 0., 1.),
		y*y*(3.-2.*y),
	)
	clr = clr*clr*(3.-2.*clr)

	return clr*opacity
}

func Fragment(position vec4, texCoord vec2, color vec4) vec4 {
	pos := texCoord
	pos.y = 1.-pos.y

	index := int(floor(pos.x*60.))
	t := mod(pos.x*60., 1.)
	y := mix(
		Levels[clamp(index-1, 0, 59)],
		Levels[index],
		1-t,
	)
	y = mix(
		y,
		Levels[clamp(index+1, 0, 59)],
		t,
	)

	pos *= vec2(1920, 1080)
	if pos.y <= y { // Needs to be reversed
		return colorize(pos.y/clamp(y, 0.01, MaxLevel))
	}

	return vec4(0.)
}